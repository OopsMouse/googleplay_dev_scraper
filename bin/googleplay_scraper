#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# design time...
#lib = File.expand_path('../lib', File.dirname(__FILE__))
#$LOAD_PATH.unshift(lib)

require 'optparse'
require 'googleplay_scraper'

Version = GooglePlayScraper::VERSION

module GooglePlayScraper
  class Tool
    def initialize
      $proxy_host = nil
      $proxy_port = nil
      $email_address = nil
      $password = nil
      $dev_acc = nil

      @show_details = false
      @auto_archive = false
    end

    def main
      load_config
      parse_arguments

      usage if ARGV.size < 1

      setup_scraper

      command = ARGV.shift
      case command
      when "sales"
        sales
      when "estimated"
        estimated
      when "orders"
        orders
      when "order"
        order
      when "payouts"
        payouts
      when "appstats"
        appstats
      when "autodeliver"
        autodeliver
      else
        usage
      end
    end

    def load_config
      [".googleplay_scraper", ENV['HOME'] + "/.googleplay_scraper"].each do |file|
        if File.exists? file
          load file
          break
        end
      end
    end

    def usage
      STDERR.puts "Usage: #{$0} [options] command [arguments...]"
      STDERR.puts "       #{$0} --help"
      STDERR.puts "  Commands:"
      STDERR.puts "    sales <year> <month>       Get monthly sales report"
      STDERR.puts "    estimated <year> <month>   Get estimated sales report"
      STDERR.puts "    orders [--details] <start_date> <end_date> [<state>]    Get order list"
      STDERR.puts "    order <order_id>           Get order details (in html)"
      STDERR.puts "    payouts <start_date> <end_date> [<type>]      Get payout report"
      STDERR.puts "    appstats <package_name> <startDay> <endDay>   Get app stats (in zip file)"
      STDERR.puts "    autodeliver [--auto]       Push all deliver buttons"
      exit 1
    end

    def parse_arguments
      opts = OptionParser.new do |opt|
        opt.on('-u email', 'set email address') {|v| $email_address = v}
        opt.on('-p password', 'set password') {|v| $password = v}
        opt.on('-a dev_acc', 'set dev_acc') {|v| $dev_acc = v}

        opt.on('-P host:port', 'Set HTTP proxy/port') {|v|
          a = v.split(/:/)
          $proxy_host = a[0]
          $proxy_port = a[1]
        }
        opt.on('--details', 'Show detail CSV for order list') {|v| @show_details = true}
        opt.on('--auto', 'Auto deliver') {|v| @auto_archive = true}
        opt.parse!(ARGV)
      end
    end

    def setup_scraper
      @scraper = Scraper.new
      @scraper.proxy_host = $proxy_host if $proxy_host
      @scraper.proxy_port = $proxy_port if $proxy_port

      raise "No email address" if $email_address.nil?
      @scraper.email = $email_address

      raise "No password" if $password.nil?
      @scraper.password = $password
      @scraper.dev_acc = $dev_acc
    end

    def sales
      usage if (ARGV.size < 2)

      year = ARGV[0]
      month = ARGV[1]

      puts @scraper.get_sales_report(year, month)
    end

    def estimated
      usage if (ARGV.size < 2)

      year = ARGV[0]
      month = ARGV[1]

      puts @scraper.get_estimated_sales_report(year, month)
    end

    # get daily orders
    def orders
      usage if (ARGV.size < 2)

      startdate = ARGV[0]
      enddate = ARGV[1]
      state = "CHARGED"
      if (ARGV.size >= 3)
        state = ARGV[2]
      end

      puts @scraper.get_order_list(startdate, enddate, state, @show_details)
    end

    def order
      orderId = ARGV[0]
      puts @scraper.get_order_detail(orderId)
    end

    def payouts
      startdate = Date.parse(ARGV[0])
      enddate = Date.parse(ARGV[1])
      type = "PAYOUT_REPORT"
      if (ARGV.size >= 3)
        type = ARGV[2]
      end

      puts @scraper.get_payouts(startdate, enddate, type)
    end

    def appstats
      usage if ARGV.size < 3
      package = ARGV[0]
      startDay = ARGV[1]
      endDay = ARGV[2]

      puts @scraper.get_appstats(package, startDay, endDay)
    end

    def autodeliver
      @scraper.auto_deliver @auto_archive
    end
  end
end

tool = GooglePlayScraper::Tool.new
tool.main

