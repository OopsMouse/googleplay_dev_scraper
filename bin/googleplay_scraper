#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# design time...
lib = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift(lib)

require 'optparse'
require 'googleplay_scraper'

Version = GooglePlayScraper::VERSION

module GooglePlayScraper
  class Tool
    def initialize
      @scraper = Scraper.new

      @show_details = false
      @auto_archive = false
    end

    def main
      @scraper.config.load_config
      parse_arguments

      usage if ARGV.size < 1

      command = ARGV.shift
      case command
      when "sales"
        sales
      when "estimated"
        estimated
      when "orders"
        orders
      when "appstats"
        appstats
      when "wallet_orders"
        wallet_orders
      else
        usage
      end
    end

    def usage
      STDERR.puts "Usage: #{$0} [options] command [arguments...]"
      STDERR.puts "       #{$0} --help"
      STDERR.puts "  Commands:"
      STDERR.puts "    sales <year> <month>       Get monthly sales report"
      STDERR.puts "    estimated <year> <month>   Get estimated sales report"
      STDERR.puts "    orders [--details] <start_date> <end_date> [<state>]    Get order list"
      STDERR.puts "    appstats <package_name> <startDay> <endDay>   Get app stats (in zip file)"
      exit 1
    end

    def parse_arguments
      config = @scraper.config

      opts = OptionParser.new do |opt|
        opt.on('-u email', 'set email address') {|v| config.email = v}
        opt.on('-p password', 'set password') {|v| config.password = v}
        opt.on('-a dev_acc', 'set dev_acc') {|v| config.dev_acc = v}

        opt.on('-P host:port', 'Set HTTP proxy/port') {|v|
          a = v.split(/:/)
          config.proxy_host = a[0]
          config.proxy_port = a[1]
        }
        opt.on('-v', '--version', 'Show version') {
          puts VERSION
          exit 0
        }
        opt.parse!(ARGV)
      end
    end

    def sales
      usage if (ARGV.size < 2)

      year = ARGV[0]
      month = ARGV[1]

      puts @scraper.get_sales_report(year, month)
    end

    def estimated
      usage if (ARGV.size < 2)

      year = ARGV[0]
      month = ARGV[1]

      puts @scraper.get_estimated_sales_report(year, month)
    end

    # get daily orders
    def orders
      usage if (ARGV.size < 2)

      startdate = DateTime.parse(ARGV[0])
      enddate = DateTime.parse(ARGV[1])

      puts @scraper.get_order_list(startdate, enddate)
    end

    def wallet_orders
      puts @scraper.get_wallet_orders
    end

    def appstats
      usage if ARGV.size < 3
      package = ARGV[0]
      startDay = ARGV[1]
      endDay = ARGV[2]

      puts @scraper.get_appstats(package, startDay, endDay)
    end
  end
end

tool = GooglePlayScraper::Tool.new
tool.main

